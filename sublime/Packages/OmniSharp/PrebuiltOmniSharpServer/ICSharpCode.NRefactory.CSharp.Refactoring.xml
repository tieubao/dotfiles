<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ICSharpCode.NRefactory.CSharp.Refactoring</name>
    </assembly>
    <members>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.AddAnotherAccessorAction">
            <summary>
            Add another accessor to a property declaration that has only one.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.AddArgumentNameAction">
            <summary>
            Add name for argument
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.AddUsingAction">
            <summary>
            1) When a type cannot be resolved, offers to add a using declaration
            or to replace it with the fully qualified type name.
            2) When an extension method cannot be resolved, offers to add a using declaration.
            3) When the caret is on a namespace name, offers to add a using declaration
            and simplify the type references to use the new shorter option.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.AutoLinqSumAction">
            <summary>
            Convers a loop to a Linq expression.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.ChangeAccessModifierAction">
            <summary>
            Changes the access level of an entity declaration
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.CheckIfParameterIsNullAction">
            <summary>
            Creates a 'if (param == null) throw new System.ArgumentNullException ();' contruct for a parameter.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.ConvertAsToCastAction">
            <summary>
            Converts an 'as' expression to a cast expression
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.ConvertCastToAsAction">
            <summary>
            Converts a cast expression to an 'as' expression
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.ConvertDecToHexAction">
            <summary>
            Convert a dec numer to hex. For example: 16 -&gt; 0x10
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.ConvertDoWhileToWhileLoopAction">
            <summary>
            Convert do...while to while. For instance, { do x++; while (Foo(x)); } becomes { while(Foo(x)) x++; }.
            Note that this action will often change the semantics of the code.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.ConvertEqualityOperatorToEqualsAction">
            <summary>
            Convert do...while to while. For instance, { do x++; while (Foo(x)); } becomes { while(Foo(x)) x++; }.
            Note that this action will often change the semantics of the code.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.ConvertEqualsToEqualityOperatorAction">
            <summary>
            Convert do...while to while. For instance, { do x++; while (Foo(x)); } becomes { while(Foo(x)) x++; }.
            Note that this action will often change the semantics of the code.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.ConvertForeachToForAction">
            <summary>
            Converts a foreach loop to for.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.ConvertHexToDecAction">
            <summary>
            Convert a hex numer to dec. For example: 0x10 -&gt; 16
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.ConvertWhileToDoWhileLoopAction">
            <summary>
            Converts a while loop to a do...while loop.
            For instance: while (foo) {} becomes do { } while (foo);
            </summary>
        </member>
        <member name="P:ICSharpCode.NRefactory.CSharp.Refactoring.CreateEventInvocatorAction.UseExplictType">
            <summary>
            If <c>true</c> an explicit type will be used for the handler variable; otherwise, 'var' will be used as type.
            Default value is <c>false</c></summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member T:ICSharpCode.NRefactory.CSharp.Refactoring.IntroduceFormatItemAction-->
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.SpecializedCodeAction`1">
            <summary>
            A specialized code action creates a code action assoziated with one special type of ast nodes.
            </summary>
        </member>
        <member name="M:ICSharpCode.NRefactory.CSharp.Refactoring.SpecializedCodeAction`1.GetAction(ICSharpCode.NRefactory.CSharp.Refactoring.RefactoringContext,`0)">
            <summary>
            Gets the action for the specified ast node.
            </summary>
            <returns>
            The code action. May return <c>null</c>, if no action can be provided.
            </returns>
            <param name="context">
            The refactoring conext.
            </param>
            <param name="node">
            The AstNode it's ensured that the node is always != null, if called.
            </param>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.NotImplementedExceptionIssue">
            <summary>
            This inspector just shows that there is a not implemented exception. It doesn't offer a fix.
            Should only be shown in overview bar, no underlining.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.RedundantInternalIssue">
            <summary>
            Finds redundant internal modifiers.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.RedundantPrivateIssue">
            <summary>
            Finds redundant internal modifiers.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.GatherVisitorCodeIssueProvider">
            <summary>
            The code issue provider gets a list of all code issues in a syntax tree.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.GatherVisitorBase`1">
            <summary>
            A base class for writing issue provider visitor implementations.
            </summary>
        </member>
        <member name="F:ICSharpCode.NRefactory.CSharp.GatherVisitorBase`1.issueProvider">
            <summary>
            The issue provider. May be <c>null</c> if none was specified.
            </summary>
        </member>
        <member name="M:ICSharpCode.NRefactory.CSharp.GatherVisitorBase`1.#ctor(ICSharpCode.NRefactory.CSharp.Refactoring.BaseRefactoringContext,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.NRefactory.CSharp.GatherVisitorBase`1" /> class.
            </summary>
            <param name="ctx">
            The refactoring context.
            </param>
            <param name="qualifierDirectiveEvidentIssueProvider">
            The issue provider.
            </param>
        </member>
        <member name="M:ICSharpCode.NRefactory.CSharp.GatherVisitorBase`1.GetIssues">
            <summary>
            Gets all the issues using the context root node as base.
            </summary>
            <returns>
            The issues.
            </returns>
        </member>
        <member name="M:ICSharpCode.NRefactory.CSharp.RefactoringExtensions.GetLocalVariableDeclarationSpace(ICSharpCode.NRefactory.CSharp.AstNode)">
            <summary>
            Gets the local variable declaration space, as defined by ยง3.3 Declarations.
            </summary>
            <returns>The local variable declaration space.</returns>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.EmptyGeneralCatchClauseIssue">
            <summary>
            A catch clause that catches System.Exception and has an empty body
            </summary>
        </member>
        <member name="P:ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule.RequiredPrefixes">
            <summary>
            If set, identifiers are required to be prefixed with one of these values.
            </summary>
        </member>
        <member name="P:ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule.AllowedPrefixes">
            <summary>
            If set, identifiers are allowed to be prefixed with one of these values.
            </summary>
        </member>
        <member name="P:ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule.RequiredSuffixes">
            <summary>
            If set, identifiers are required to be suffixed with one of these values.
            </summary>
        </member>
        <member name="P:ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule.ForbiddenPrefixes">
            <summary>
            If set, identifiers cannot be prefixed by any of these values.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule.ForbiddenSuffixes-->
        <member name="P:ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule.AffectedEntity">
            <summary>
            Gets or sets the affected entity.
            </summary>
        </member>
        <member name="P:ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule.VisibilityMask">
            <summary>
            Gets or sets the modifiers mask
            </summary>
        </member>
        <member name="P:ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule.NamingStyle">
            <summary>
            The way that the identifier is cased and that words are separated.
            </summary>
        </member>
        <member name="M:ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule.ApplySuffix(System.String,System.String)">
            <summary>
            Applies a suffix to a name and tries to reuse the suffix of the suffix.
            MyArgs + EventArgs -&gt; MyEventArgs instead of MyArgsEventArgs
            </summary>
        </member>
        <member name="M:ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule.GetPreview">
            <summary>
            Gets an identifier (or comma separated list of identifiers) which apply to this naming rule.
            </summary>
        </member>
        <member name="F:ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.PascalCase">
            <summary>
            PascalCase
            </summary>
        </member>
        <member name="F:ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.CamelCase">
            <summary>
            camelCase
            </summary>
        </member>
        <member name="F:ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.AllUpper">
            <summary>
            ALLUPPER
            </summary>
        </member>
        <member name="F:ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.AllLower">
            <summary>
            alllower
            </summary>
        </member>
        <member name="F:ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.FirstUpper">
            <summary>
            Firstupper
            </summary>
        </member>
        <member name="F:ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.PascalCaseWithLowerLetterUnderscore">
            <summary>
            PascalCaseWithLowerLetterUnderscore
            </summary>
        </member>
        <member name="F:ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.PascalCaseWithUpperLetterUnderscore">
            <summary>
            PascalCaseWithUpperLetterUnderscore
            </summary>
        </member>
        <member name="F:ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.CamelCaseWithLowerLetterUnderscore">
            <summary>
            CamelCaseWithLowerLetterUnderscore
            </summary>
        </member>
        <member name="F:ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.CamelCaseWithUpperLetterUnderscore">
            <summary>
            CamelCaseWithUpperLetterUnderscore
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member T:ICSharpCode.NRefactory.CSharp.Refactoring.ConvertConditionalTernaryToNullCoalescingIssue-->
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.SuggestUseVarKeywordEvidentIssue">
            <summary>
            Checks for places where the 'var' keyword can be used. Note that the action is actually done with a context
            action.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.ReplaceWithStringIsNullOrEmptyIssue">
            <summary>
            Checks for str == null &amp;&amp; str == " "
            Converts to: string.IsNullOrEmpty (str)
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.RedundantBaseQualifierIssue">
            <summary>
            Finds redundant base qualifier
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.RedundantExtendsListEntryIssue">
            <summary>
            Type is either mentioned in the base type list of other part, or it is interface and appears as other's type base and contains no explicit implementation.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.RedundantNameQualifierIssue">
            <summary>
            Finds redundant namespace usages.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.RedundantThisQualifierIssue">
            <summary>
            Finds redundant this usages.
            </summary>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.RedundantUsingDirectiveIssue">
            <summary>
            Finds redundant using declarations.
            </summary>
        </member>
        <member name="P:ICSharpCode.NRefactory.CSharp.Refactoring.RedundantUsingDirectiveIssue.NamespacesToKeep">
            <summary>
            The list of namespaces that should be kept even if they are not being used.
            Used in SharpDevelop to always keep the "System" namespace around.
            </summary>
        </member>
        <member name="F:ICSharpCode.NRefactory.CSharp.Refactoring.DontUseLinqWhenItsVerboseAndInefficientIssue.LinqMethod.IsPoorStyleAlone">
            <summary>
            Indicates that the method should be considered bad even when used alone.
            </summary>
        </member>
        <member name="F:ICSharpCode.NRefactory.CSharp.Refactoring.DontUseLinqWhenItsVerboseAndInefficientIssue.LinqMethod.ParameterCount">
            <summary>
            The number of parameters the definition has.
            </summary>
        </member>
        <member name="M:ICSharpCode.NRefactory.CSharp.Refactoring.PossibleMultipleEnumerationIssue.GatherVisitor.SplitNode(ICSharpCode.NRefactory.CSharp.Refactoring.VariableReferenceNode)">
            <summary>
            split references in the specified node into sub nodes according to the value they uses
            </summary>
            <param name="node">node to split</param>
            <returns>list of sub nodes</returns>
        </member>
        <member name="M:ICSharpCode.NRefactory.CSharp.Refactoring.PossibleMultipleEnumerationIssue.GatherVisitor.GetAssignmentUsageGraph(ICSharpCode.NRefactory.CSharp.Refactoring.VariableReferenceNode)">
            <summary>
            convert a variable reference graph starting from the specified node to an assignment usage graph,
            in which nodes are connect if and only if they contains references using the same assigned value
            </summary>
            <param name="startNode">starting node of the variable reference graph</param>
            <returns>
            list of VariableReferenceNode, each of which is a starting node of a sub-graph in which references all
            use the same assigned value
            </returns>
        </member>
        <member name="T:ICSharpCode.NRefactory.CSharp.Refactoring.UnmatchedSizeSpecificationInArrayCreationIssue">
            <summary>
            When array initializer has the different number of elements as specified in size creation, it is an error.
            </summary>
        </member>
        <member name="M:ICSharpCode.NRefactory.CSharp.Refactoring.ITypeCriterion.SatisfiedBy(ICSharpCode.NRefactory.TypeSystem.IType)">
            <summary>
            Checks if the given type satisfies the critrion.
            </summary>
            <returns>
                <c>true</c>, if the type satisfies the criterion, <c>false</c> otherwise.
            </returns>
            <param name="type">
            The type to check.
            </param>
        </member>
    </members>
</doc>
